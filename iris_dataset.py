# -*- coding: utf-8 -*-
"""Iris Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JsRyt4i6ABwj34uqd2pq9Qbpi56Ectk-
"""

!pip install matplotlib seaborn scikit-learn numpy

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.decomposition import PCA, NMF, FactorAnalysis, TruncatedSVD, KernelPCA
from sklearn.manifold import TSNE, Isomap, MDS, LocallyLinearEmbedding
from sklearn.random_projection import GaussianRandomProjection
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.preprocessing import StandardScaler

data = load_iris()
X = data.data
y = data.target

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=data.target_names[y], palette='Set2')
plt.title("PCA - Iris Dataset")
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.show()

from sklearn.decomposition import FastICA

# ICA
ica = FastICA(n_components=2)
X_ica = ica.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_ica[:, 0], y=X_ica[:, 1], hue=data.target_names[y], palette='Set2')
plt.title("ICA - Iris Dataset")
plt.xlabel("Independent Component 1")
plt.ylabel("Independent Component 2")
plt.show()

# t-SNE
tsne = TSNE(n_components=2)
X_tsne = tsne.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_tsne[:, 0], y=X_tsne[:, 1], hue=data.target_names[y], palette='Set2')
plt.title("t-SNE - Iris Dataset")
plt.xlabel("t-SNE 1")
plt.ylabel("t-SNE 2")
plt.show()

# LDA
lda = LinearDiscriminantAnalysis(n_components=2)
X_lda = lda.fit_transform(X_scaled, y)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_lda[:, 0], y=X_lda[:, 1], hue=data.target_names[y], palette='Set2')
plt.title("LDA - Iris Dataset")
plt.xlabel("LDA 1")
plt.ylabel("LDA 2")
plt.show()

!pip install tensorflow

from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense
from tensorflow.keras.optimizers import Adam

input_layer = Input(shape=(X_scaled.shape[1],))
encoded = Dense(2, activation='relu')(input_layer)
decoded = Dense(X_scaled.shape[1], activation='sigmoid')(encoded)

autoencoder = Model(input_layer, decoded)
autoencoder.compile(optimizer=Adam(), loss='mean_squared_error')

autoencoder.fit(X_scaled, X_scaled, epochs=50, batch_size=16, shuffle=True)

encoder = Model(input_layer, encoded)
X_autoencoded = encoder.predict(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_autoencoded[:, 0], y=X_autoencoded[:, 1], hue=data.target_names[y], palette='Set2')
plt.title("Autoencoder - Iris Dataset")
plt.xlabel("Autoencoded 1")
plt.ylabel("Autoencoded 2")
plt.show()

# LLE
lle = LocallyLinearEmbedding(n_components=2)
X_lle = lle.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_lle[:, 0], y=X_lle[:, 1], hue=data.target_names[y], palette='Set2')
plt.title("LLE - Iris Dataset")
plt.xlabel("LLE 1")
plt.ylabel("LLE 2")
plt.show()

# Isomap
isomap = Isomap(n_components=2)
X_isomap = isomap.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_isomap[:, 0], y=X_isomap[:, 1], hue=data.target_names[y], palette='Set2')
plt.title("Isomap - Iris Dataset")
plt.xlabel("Isomap 1")
plt.ylabel("Isomap 2")
plt.show()

# MDS
mds = MDS(n_components=2)
X_mds = mds.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_mds[:, 0], y=X_mds[:, 1], hue=data.target_names[y], palette='Set2')
plt.title("MDS - Iris Dataset")
plt.xlabel("MDS 1")
plt.ylabel("MDS 2")
plt.show()

# NMF
nmf = NMF(n_components=2)
X_nmf = nmf.fit_transform(X)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_nmf[:, 0], y=X_nmf[:, 1], hue=data.target_names[y], palette='Set2')
plt.title("NMF - Iris Dataset")
plt.xlabel("NMF 1")
plt.ylabel("NMF 2")
plt.show()

# Truncated SVD
svd = TruncatedSVD(n_components=2)
X_svd = svd.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_svd[:, 0], y=X_svd[:, 1], hue=data.target_names[y], palette='Set2')
plt.title("SVD - Iris Dataset")
plt.xlabel("SVD 1")
plt.ylabel("SVD 2")
plt.show()

# Random Projection
rp = GaussianRandomProjection(n_components=2)
X_rp = rp.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_rp[:, 0], y=X_rp[:, 1], hue=data.target_names[y], palette='Set2')
plt.title("Random Projection - Iris Dataset")
plt.xlabel("Random Projection 1")
plt.ylabel("Random Projection 2")
plt.show()

# Kernel PCA
kpca = KernelPCA(n_components=2, kernel='rbf')
X_kpca = kpca.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_kpca[:, 0], y=X_kpca[:, 1], hue=data.target_names[y], palette='Set2')
plt.title("Kernel PCA - Iris Dataset")
plt.xlabel("Kernel PCA 1")
plt.ylabel("Kernel PCA 2")
plt.show()

fig, axes = plt.subplots(3, 4, figsize=(20, 15))

for ax, title, X_reduced in zip(
        axes.flatten(),
        ['PCA', 'ICA', 't-SNE', 'LDA', 'Autoencoder', 'LLE', 'Isomap', 'MDS', 'NMF', 'SVD', 'Random Projection', 'Kernel PCA'],
        [X_pca, X_ica, X_tsne, X_lda, X_autoencoded, X_lle, X_isomap, X_mds, X_nmf, X_svd, X_rp, X_kpca]):

    sns.scatterplot(x=X_reduced[:, 0], y=X_reduced[:, 1], hue=data.target_names[y], palette='Set2', ax=ax)
    ax.set_title(title)
    ax.set_xlabel(f'{title} 1')
    ax.set_ylabel(f'{title} 2')

plt.tight_layout()
plt.show()